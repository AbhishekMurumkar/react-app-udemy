Redux : THis is third party and Core Module, used because the state management can be difficult in more complex projects
        This is independent of react

Understanding state:
    State is (ingredients added to burger,information added by user,data of burger and user stored in server,is modal open, is backdrop open,list of blog posts etc)in all the mentioned examples state linked to component wise.

Redux Actions for handling Complexity of state management:
    ->used instead of using route query params.
    ->used when we need state of one component into another which are way more far from each other.
    ->used as state, but with a global variable which can be accessed anywhere from the application.

Redux Flow:
->central place for state management
->Stores application state

1) Here when component want to change the redux state it must
    1.1: throw a dispatch(message)
    1.2: with certain "Action" name and with "Payload"(the data it wants to change)(Note:Action is just a package)
2)Upon receiving, it reaches to
    Reducers = Multiple actions can lead to multiple reducers(object) where each receive the action data and update state.These reducers tend to work together for multiple request and atlast form a single reducer to change the global state of applications.
    Thus here there should be only synchronous code of executions is allowed, no HTTP requests.
3)Lastly one reducer updates the central state of application
4)Thus to respond to the changed made in the central state we need to have triggers,
5)These are called subscriptions which implement change as soon as trigger has notified to them.For that our component need to subscribe to changes

see Redux.png,learing-redux.pdf


Setting Up Reducers and Stores:
1) install redux : npm install --save redux
2) Since redux is a standalone application-> create a new file called "redux-basics.js" along side of package.json to run it with node
3)see that files for more content

Connecting the Redux to react application:


Connection React to Reduc from npm package called react-redux and redux:
1. npm i --save react-redux
2. Create a store which is at component level
3. create a reducer and store and import store in index.js then
4. then in index.js
    ->import react-redux
    ->wrap app component with PROVIDER(Helper component that injects our store component to app)
    ->where we will pass our store component object as props in PROVIDER component
5. connecting the store from the inner child component
    ->import {connect} from "react-redux"
    ->connect is
        1. its a function which takes parameters which connects to store and does the changes in store via dispatch
        ->this is will directly connect to your store via PROVIDER HOA
        ->if state is present then it must be mapped to props in the needed component
        ->if dispatch is present then what must be dispatch must be written in needed component and then mapped to props(see counter.js in reduxApp)
        2. then its a component which send the new store state as props to wrapped component


State management:
1.updating it without immutating
Updating Nested Objects
The key to updating nested data is that every level of nesting must be copied and updated appropriately. This is often a difficult concept for those learning Redux, and there are some specific problems that frequently occur when trying to update nested objects. These lead to accidental direct mutation, and should be avoided.

Common Mistake #1: New variables that point to the same objects
Defining a new variable does not create a new actual object - it only creates another reference to the same object. An example of this error would be:

function updateNestedState(state, action) {
    let nestedState = state.nestedState;
    // ERROR: this directly modifies the existing object reference - don't do this!
    nestedState.nestedField = action.data;

    return {
        ...state,
        nestedState
    };
}
This function does correctly return a shallow copy of the top-level state object, but because the nestedState variable was still pointing at the existing object, the state was directly mutated.

Common Mistake #2: Only making a shallow copy of one level
Another common version of this error looks like this:

function updateNestedState(state, action) {
    // Problem: this only does a shallow copy!
    let newState = {...state};

    // ERROR: nestedState is still the same object!
    newState.nestedState.nestedField = action.data;

    return newState;
}
Doing a shallow copy of the top level is not sufficient - the nestedState object should be copied as well.

Correct Approach: Copying All Levels of Nested Data
Unfortunately, the process of correctly applying immutable updates to deeply nested state can easily become verbose and hard to read. Here's what an example of updating state.first.second[someId].fourth might look like:

function updateVeryNestedField(state, action) {
    return {
        ...state,
        first : {
            ...state.first,
            second : {
                ...state.first.second,
                [action.someId] : {
                    ...state.first.second[action.someId],
                    fourth : action.someValue
                }
            }
        }
    }
}
Obviously, each layer of nesting makes this harder to read, and gives more chances to make mistakes. This is one of several reasons why you are encouraged to keep your state flattened, and compose reducers as much as possible.

Inserting and Removing Items in Arrays
Normally, a Javascript array's contents are modified using mutative functions like push, unshift, and splice. Since we don't want to mutate state directly in reducers, those should normally be avoided. Because of that, you might see "insert" or "remove" behavior written like this:

function insertItem(array, action) {
    return [
        ...array.slice(0, action.index),
        action.item,
        ...array.slice(action.index)
    ]
}

function removeItem(array, action) {
    return [
        ...array.slice(0, action.index),
        ...array.slice(action.index + 1)
    ];
}
However, remember that the key is that the original in-memory reference is not modified. As long as we make a copy first, we can safely mutate the copy. Note that this is true for both arrays and objects, but nested values still must be updated using the same rules.

This means that we could also write the insert and remove functions like this:

function insertItem(array, action) {
    let newArray = array.slice();
    newArray.splice(action.index, 0, action.item);
    return newArray;
}

function removeItem(array, action) {
    let newArray = array.slice();
    newArray.splice(action.index, 1);
    return newArray;
}
The remove function could also be implemented as:

function removeItem(array, action) {
    return array.filter( (item, index) => index !== action.index);
}
Updating an Item in an Array
Updating one item in an array can be accomplished by using Array.map, returning a new value for the item we want to update, and returning the existing values for all other items:

function updateObjectInArray(array, action) {
    return array.map( (item, index) => {
        if(index !== action.index) {
            // This isn't the item we care about - keep it as-is
            return item;
        }

        // Otherwise, this is the one we want - return an updated value
        return {
            ...item,
            ...action.item
        };
    });
}
Immutable Update Utility Libraries
Because writing immutable update code can become tedious, there are a number of utility libraries that try to abstract out the process. These libraries vary in APIs and usage, but all try to provide a shorter and more succinct way of writing these updates. Some, like dot-prop-immutable, take string paths for commands:

state = dotProp.set(state, `todos.${index}.complete`, true)
Others, like immutability-helper (a fork of the now-deprecated React Immutability Helpers addon), use nested values and helper functions:

var collection = [1, 2, {a: [12, 17, 15]}];
var newCollection = update(collection, {2: {a: {$splice: [[1, 1, 13, 14]]}}});
They can provide a useful alternative to writing manual immutable update logic.

Immutable Data#Immutable Update Utilities section of the Redux Addons Catalog.



--> some times we have a vast application where having only one reducer can be a bad idea
-> then we will create multiple reducers and then merge them into one
-> see store/.. files where MyReducer.js is split into respective parts


================TYPES OF STATES===========:
Q) should every state be handled with redux?
Q) do you always start with redux to begin with your react app?
A.  In smaller application, the redux can take longer time to setup than the benefits you get
    In decent application size, use redux can be helpful but you shouldnt manage all the state in it

NOTE::: when user refreshes your page , your current state will be gone

Types of STATES
1. Local UI Transition state (consider not using or using less of redux here)
2. Persistant State : state the has data from server end about application
3. Client state : authentication, filter set etc. (here we use redux)

see State-Types.pdf for more..


-----------------------------------------ADVANCED REDUX-------------------------------------------------
-> Middlewares : check ReduxMiddleware.png
    code that handles the execution before dispatching the actions to stored
    implemented with applyMiddleware helper from redux component
    -->THis is a function which takes a parameters which return state functions (dispatch and getState)
        which returns another function with dispatch as parameter where this function will return some action
        this inner most part of function is where the controlling or changes in actions or dispatch can be made
        ex:

        //creating middleware
        const logger = (statefunctions)=>{
          console.log(statefunctions)
            return (singledispatch)=>{
              console.log(singledispatch)
              return action=>{
                console.log(action)

                console.log("[Middleware] Dispatching ",action);
                const result = singledispatch(action);
                console.log("[Middleware] NextState",statefunctions.getState());
                return result;
              }
            }
          }

=================================================
Using  redux Dev tools:
===============================================
Using Asynchronous code:
-> we need action creators:Its is function that returns a action
