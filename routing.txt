-> re-render parts of page based on paths
->we need special router package called:
->It does:
1) parses url
2) read current configuration/current page or path
3) render/load respective JSX element based on url

setting up router package:
npm install --save react-router react-router-dom

Note: react-router vs react-router-dom
We installed both react-router  and react-router-dom . Technically, only react-router-dom  is required for web development. It wraps react-router  and therefore uses it as a dependency. We don't need to install react-router  on our own for it to work. You can omit this installation step, I left it in there for historic reasons and because I like to emphasize that the main package is named react-router. If you ever search for assistance, you probably want to search for "react router" - that's the name of the package.


// BrowserRouter is the router implementation for HTML5 browsers (vs Native).this is the parent component that is used to store all of your <Route> components. 
// Link is your replacement for anchor tags.
// Route is the conditionally shown component based on matching a path to a URL.
// Switch returns only the first matching route rather than all matching routes.
// withRouter(Comp) this HOC gives ability to use route info via parameters
// NavLink : just a anchor tag with precontrolled class name or can append classnames and styles to it

Route JSX:
Link JSX:

routing related props:
due to routing module some props are sent to components by default like
these props are not shared to child components by default, to do so we need to use the 'withRouter' from react-router-dom (HOC) to pass props to children . Note this is strictly based on the nearest route possible

history:
    action: "PUSH"
    block: ƒ block(prompt)
    createHref: ƒ createHref(location)
    go: ƒ go(n)
    goBack: ƒ goBack()
    goForward: ƒ goForward()
    length: 50
    listen: ƒ listen(listener)
    location: {pathname: "/new-post", search: "", hash: "", state: undefined, key: "4q0wsi"}
    push: ƒ push(path, state)
    replace: ƒ replace(path, state)

location:
    hash: ""
    pathname: "/"
    search: ""
    state: undefined    

match:
    isExact: true
    params: {}
    path: "/"
    url: "/"

Types of Links:
1) absolute: always appended to domain
2) relative: appended to a certain path(this is mostly used to build links or routes based on one link or route).This is done by props.match property


building dynamic routes:
<Route path="/path/:id" ..>..</Route>, where id is the name of the unique id in out database.This id can be accessed in other page or route from props in (componentDidMount() method only)

Note:
 Routing Params can be checked in the componentDidMount() not in componentDidUpdate()

 But how do you extract search (also referred to as "query") parameters (=> ?something=somevalue  at the end of the URL)? How do you extract the fragment (=> #something  at the end of the URL)?

Query Params:
You can pass them easily like this:

<Link to="/my-path?start=5">Go to Start</Link> 

or

<Link 
    to={‌{
        pathname: '/my-path',
        search: '?start=5'
    }}
    >Go to Start</Link>
React router makes it easy to get access to the search string: props.location.search .

But that will only give you something like ?start=5 

You probably want to get the key-value pair, without the ?  and the = . Here's a snippet which allows you to easily extract that information:

componentDidMount() {
    const query = new URLSearchParams(this.props.location.search);
    for (let param of query.entries()) {
        console.log(param); // yields ['start', '5']
    }
}
URLSearchParams  is a built-in object, shipping with vanilla JavaScript. It returns an object, which exposes the entries()  method. entries()  returns an Iterator - basically a construct which can be used in a for...of...  loop (as shown above).

When looping through query.entries() , you get arrays where the first element is the key name (e.g. start ) and the second element is the assigned value (e.g. 5 ).

Fragment:
You can pass it easily like this:

<Link to="/my-path#start-position">Go to Start</Link> 

or

<Link 
    to={‌{
        pathname: '/my-path',
        hash: 'start-position'
    }}
    >Go to Start</Link>
React router makes it easy to extract the fragment. You can simply access props.location.hash .

switch jsx in react-router-dom-> used to load single link when we have similar links


---------------------------------------------------------
NESTED ROUTES: